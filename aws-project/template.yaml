AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Parameters:
  DevState:
    Type: String
    Default: local

Mappings: 
  Images: 
    local: 
      grader: local-grader
    remote: 
      grader: "a"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: 512

Resources:
  GraderTriggerLambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/grader-trigger-function/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt GraderRole.Arn
      Architectures:
        - x86_64
      Events:
        GithubWebhook:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /grade/{id}
            Method: post
      Environment:
        Variables:
          GRADER_DELIVERY_QUEUE_URL: !Ref GraderQueue
          
  GraderImageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      CodeUri: functions/grader-function/
      Timeout: 600
      MemorySize: 1024
      ImageConfig:
        Command: ["lambda_function.handler"]
      Events:
        GraderQueueTrigger:
          Type: SQS 
          Properties:
            Queue: !GetAtt GraderQueue.Arn
            BatchSize: 5
            Enabled: true
      Environment:
        Variables:
          CANVAS_API_URL: ""
          CANVAS_API_KEY: ""
          GITHUB_ACCESS_TOKEN: ""
          XDG_DATA_HOME: "/tmp/"
          DOTNET_CLI_HOME: "/tmp/"
    Metadata:
      DockerTag:  v1
      DockerContext: ./functions/grader-function
      Dockerfile: Dockerfile

  GraderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'sqs:SendMessage'
                Resource: !GetAtt GraderQueue.Arn

  GraderQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: "grader-delivery-queue"
